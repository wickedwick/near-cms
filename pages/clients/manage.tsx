import { nanoid } from "nanoid"
import { NextPage } from "next"
import Head from "next/head"
import Router from "next/router"
import { useContext, useEffect, useState } from "react"
import { Client } from '../../assembly/main'
import { Role } from "../../assembly/model"
import { DbContext } from "../../context/DbContext"
import { NearContext } from "../../context/NearContext"

const ManageClients: NextPage = () => {
  const { db } = useContext(DbContext)
  const { contract, currentUser } = useContext(NearContext)
  const [clients, setClients] = useState<Client[]>([])
  const [name, setName] = useState('')
  const [owner, setOwner] = useState('')
  const [displayKey, setDisplayKey] = useState('')
  const [modalOpen, setModalOpen] = useState(false)

  useEffect(() => {
    if (!contract) {
      setTimeout(() => {
        init()
      }, 5000)
  
      return
    }
  
    init()
  }, [])

  const init = (): void => {
    if (!contract) {
      return
    }
  
    if (!currentUser || currentUser.role !== Role.Admin) {
      Router.push('/')
    }
  
    contract.getClients().then((clients: Client[]) => {
      setClients(clients)
    })
  }

  const editClient = async (client: Client): Promise<void> => {
    if (!contract) {
      return
    }

    if (!currentUser || currentUser.role !== Role.Admin) {
      Router.push('/')
    }

    Router.push('/clients/[slug]', `/clients/${client.slug}`)
  }

  const handleSubmit = async (): Promise<void> => {
    if (!contract) {
      return
    }

    const client: Client = {
      slug: nanoid(),
      name,
      owner
    }

    await contract.setClient({ client })
    handleSetApiKey(client)
    setClients([...clients, client])
  }

  const handleSetApiKey = async (client: Client): Promise<void> => {
    db.get('client').get(`${client.slug}`).get('apiKey').put(nanoid(32))
  }

  const handleShowModal = (client: Client): void => {
    db.get('client').get(`${client.slug}`).get('apiKey').on(data => {
      setDisplayKey(data)
      setModalOpen(true)

      setTimeout(() => {
        setModalOpen(false)
      }, 5000)
    })
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>Manage Clients</h1>
        <a href="/">Back to dashboard</a>

        {modalOpen && (
          <div className="modal">
            <div className="modal-content">
              <div className="modal-header">
                <h2>API Key</h2>
                <p>{displayKey}</p>
              </div>
            </div>
          </div>
        )}

        <table>
          <thead>
            <tr>
              <th>Client ID</th>
              <th>Name</th>
              <th>Owner</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {clients.map(client => (
              <tr key={client.slug}>
                <td>{client.slug}</td>
                <td>{client.name}</td>
                <td>{client.owner}</td>
                <td>
                  <button onClick={() => editClient(client)}>Edit</button>
                  <button onClick={() => handleSetApiKey(client)}>Regenerate API Key</button>
                  <button onClick={() => handleShowModal(client)}>Show API Key</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        <label htmlFor="name">Client Name</label>
        <input className="block px-3 py-2 mb-3 w-full" type="text" value={name} onChange={(e) => setName(e.target.value)} />

        <label htmlFor="owner">Owner Address</label>
        <input className="block px-3 py-2 mb-3 w-full" type="text" value={owner} onChange={(e) => setOwner(e.target.value)} />

        <button className="block px-3 py-2 mb-3 w-full" onClick={handleSubmit}>Add User</button>
      </main>
    </div>
  )
}

export default ManageClients
