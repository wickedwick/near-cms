import type { NextPage } from 'next'
import Head from 'next/head'
import { useContext, useState } from 'react'
import { NearContext } from '../../context/NearContext'
//import styles from '../styles/Home.module.css'
import Router from 'next/router'
import { Fieldtype, fieldTypeOptions } from '../../assembly/model'
import { ContentType } from '../../assembly/main'

const NewContentType: NextPage = () => {
  const { contract, currentUser, nearConfig, wallet, setCurrentUser } = useContext(NearContext)
  const [contentTypeName, setContentTypeName] = useState('')
  const [fieldName, setFieldName] = useState('')
  const [fieldType, setFieldType] = useState(Fieldtype.String)
  const [fields, setFields] = useState([])

  const handleContentTypeNameChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
    setContentTypeName(event.target.value)
  }

  const handleFieldNameChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
    setFieldName(event.target.value)
  }

  const handleFieldTypeChange = (event: React.ChangeEvent<HTMLSelectElement>): void => {
    setFieldType(event.target.value as Fieldtype)
  }

  const handleSubmit = (): void => {
    if (!contract) {
      return
    }

    const contentType: ContentType = {
      name: contentTypeName,
      fields: [
        'name',
      ]
    }

    contract.setContentType({ contentType }).then(() => {
      Router.push('/contentTypes')
    })
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>Create a Content Type</h1>

        <input className="block px-3 py-2 mb-3 w-full" type="text" value={contentTypeName} onChange={(e) => handleContentTypeNameChange(e)} />
        <input className="block px-3 py-2 mb-3 w-full" type="text" value={fieldName} onChange={(e) => handleFieldNameChange(e)} />
        <select className="block px-3 py-2 mb-3 w-full" onChange={(e) => handleFieldTypeChange(e)}>
          {fieldTypeOptions.map((key) => {
            return (
              <option value={key.value} key={key.value}>{key.label}</option>
            )
          })}
        </select>
        {/* Need a field types [] */}
        <button className="px-3 py-2 m-3 x-4 border border-green shadow-sm text-gray-light bg-green hover:bg-green focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green" onClick={handleSubmit}>Submit</button>
      </main>
    </div>
  )
}

export default NewContentType
